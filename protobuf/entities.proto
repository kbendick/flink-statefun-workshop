/*
 * Licensed to Ververica GmbH under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

import "google/protobuf/timestamp.proto";

package workshop;

message ConfirmFraud {
    string account = 1;
}

message Transaction {
    string account = 1;
    google.protobuf.Timestamp timestamp = 2;
    string merchant = 3;
    int32 amount = 4;
}

message FeatureVector {
    int32 fraud_count    = 1;
    int32 merchant_score = 2;
    int32 amount = 3;
}

message FraudScore {
    int32 score = 1;
}

// This message is sent from a FraudCount
// instance when reporting the current count
message ReportedFraud {
    int32 count = 1;
}

// This message is sent to a FraudCount instance
// when 30 days have elapsed and its internal
// count should be decremented by 1.
message ExpireFraud {

}

// This message is sent to a FraudCount instance
// when another entity wants to query the
// current count for a particular account.
message QueryFraud {

}


// This message is sent from a MerchantFunction
// instance when reporting the trustworthiness
// of a merchant.
message MerchantScore {
    int32 score = 1;
}


// This message is sent to an instance of a MerchantFunction
// to query the external service for the trustworthiness score
// of a merchant.
message QueryMerchantScore {
    string merchant = 1;
}

// This message is sent to an instance of a MerchantFunction
// to expire its local store of the trustworthiness score.
// It **busts the cache**.
message ExpireMerchantScore {

}

// This message contains a custom 
// fraud threshold for a particular
// account.
message CustomThreshold {
	int32 threshold = 1;
	string account = 2;
}

// This message is used to query 
// the current threshold for a given
// account.
message QueryThreshold {
    string account = 1;
}
